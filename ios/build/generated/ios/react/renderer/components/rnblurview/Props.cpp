
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/rnblurview/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

BlurViewProps::BlurViewProps(
    const PropsParserContext &context,
    const BlurViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    blurType(convertRawProp(context, rawProps, "blurType", sourceProps.blurType, {BlurViewBlurType::Dark})),
    blurAmount(convertRawProp(context, rawProps, "blurAmount", sourceProps.blurAmount, {10})),
    reducedTransparencyFallbackColor(convertRawProp(context, rawProps, "reducedTransparencyFallbackColor", sourceProps.reducedTransparencyFallbackColor, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName BlurViewProps::getDiffPropsImplementationTarget() const {
  return "BlurView";
}

folly::dynamic BlurViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = BlurViewProps();
  const BlurViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const BlurViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (blurType != oldProps->blurType) {
    result["blurType"] = toDynamic(blurType);
  }
    
  if (blurAmount != oldProps->blurAmount) {
    result["blurAmount"] = blurAmount;
  }
    
  if (reducedTransparencyFallbackColor != oldProps->reducedTransparencyFallbackColor) {
    result["reducedTransparencyFallbackColor"] = *reducedTransparencyFallbackColor;
  }
  return result;
}
#endif
AndroidBlurViewProps::AndroidBlurViewProps(
    const PropsParserContext &context,
    const AndroidBlurViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    blurAmount(convertRawProp(context, rawProps, "blurAmount", sourceProps.blurAmount, {10})),
    blurType(convertRawProp(context, rawProps, "blurType", sourceProps.blurType, {AndroidBlurViewBlurType::Dark})),
    blurRadius(convertRawProp(context, rawProps, "blurRadius", sourceProps.blurRadius, {0})),
    downsampleFactor(convertRawProp(context, rawProps, "downsampleFactor", sourceProps.downsampleFactor, {0})),
    overlayColor(convertRawProp(context, rawProps, "overlayColor", sourceProps.overlayColor, {})),
    enabled(convertRawProp(context, rawProps, "enabled", sourceProps.enabled, {false})),
    autoUpdate(convertRawProp(context, rawProps, "autoUpdate", sourceProps.autoUpdate, {false})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName AndroidBlurViewProps::getDiffPropsImplementationTarget() const {
  return "AndroidBlurView";
}

folly::dynamic AndroidBlurViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = AndroidBlurViewProps();
  const AndroidBlurViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const AndroidBlurViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (blurAmount != oldProps->blurAmount) {
    result["blurAmount"] = blurAmount;
  }
    
  if (blurType != oldProps->blurType) {
    result["blurType"] = toDynamic(blurType);
  }
    
  if (blurRadius != oldProps->blurRadius) {
    result["blurRadius"] = blurRadius;
  }
    
  if (downsampleFactor != oldProps->downsampleFactor) {
    result["downsampleFactor"] = downsampleFactor;
  }
    
  if (overlayColor != oldProps->overlayColor) {
    result["overlayColor"] = *overlayColor;
  }
    
  if (enabled != oldProps->enabled) {
    result["enabled"] = enabled;
  }
    
  if (autoUpdate != oldProps->autoUpdate) {
    result["autoUpdate"] = autoUpdate;
  }
  return result;
}
#endif
VibrancyViewProps::VibrancyViewProps(
    const PropsParserContext &context,
    const VibrancyViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    blurType(convertRawProp(context, rawProps, "blurType", sourceProps.blurType, {VibrancyViewBlurType::Dark})),
    blurAmount(convertRawProp(context, rawProps, "blurAmount", sourceProps.blurAmount, {10})),
    reducedTransparencyFallbackColor(convertRawProp(context, rawProps, "reducedTransparencyFallbackColor", sourceProps.reducedTransparencyFallbackColor, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName VibrancyViewProps::getDiffPropsImplementationTarget() const {
  return "VibrancyView";
}

folly::dynamic VibrancyViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = VibrancyViewProps();
  const VibrancyViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const VibrancyViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (blurType != oldProps->blurType) {
    result["blurType"] = toDynamic(blurType);
  }
    
  if (blurAmount != oldProps->blurAmount) {
    result["blurAmount"] = blurAmount;
  }
    
  if (reducedTransparencyFallbackColor != oldProps->reducedTransparencyFallbackColor) {
    result["reducedTransparencyFallbackColor"] = *reducedTransparencyFallbackColor;
  }
  return result;
}
#endif

} // namespace facebook::react
